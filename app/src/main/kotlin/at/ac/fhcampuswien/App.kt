/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.lang.IllegalArgumentException

class App {
    // Game logic for a number guessing game

    fun playNumberGame(digitsToGuess: Int = 4) {
        try {
            var playing = true
            var goal = generateRandomNonRepeatingNumber(digitsToGuess)
        println("""
    Welcome to the Game :)
    The game is a simple number guessing game.
    The number to guess doesn't contain repeating digits (valid digits are 1-9)
    You win if you guess the correct digits in the correct order.
    In each round, you will get feedback about the number of correct digits and the number of correct digits in the correct position.
    """)
            do{
                println("Enter a $digitsToGuess long digit with no repeating digits from 1-9")
                var guess = readln()
                if(guess.toIntOrNull() == null)
                {
                    println("No valid input!")
                    continue
                }
                var result = checkUserInputAgainstGeneratedNumber(guess.toInt(),goal)
                if (result.m == digitsToGuess){
                    playing = false
                    println("You win!!! The number was $goal.")
                }
                else
                {
                    println("You guessed ${result.n} correct digits with ${result.m} in the correct position")
                }
            }
            while(playing);
        }catch (e:IllegalArgumentException) // print message from generateRandomNonRepeatingNumber or checkUserInputAgainstGeneratedNumber if Exception is thrown
        {
            println(e.message)

        }

    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->

        if(length !in 1..9) // checking if length is between 1-9
        {
            throw IllegalArgumentException("The provided length $length to generate a random non repeating number is not allowed!")
        }
        val randomNumbers = (1..9).shuffled().take(length) // https://www.baeldung.com/kotlin/random-number
        val number = randomNumbers.joinToString("").toInt() // joins all numbers together with "" as separation -> converted to int
        number// return
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        var n = 0
        var m = 0
        val guess = input.toString()
        val goal = generatedNumber.toString()
        var unique = mutableListOf<Char>() // for duplicate digits in guessed number
        if(guess.length != goal.length) // check if guessed number has duplicate digits (guess.toSet().size != guess.length), problem with tester therefore taken out https://kotlinandroid.org/kotlin/kotlin-get-unique-characters-in-a-string/
        {
            throw IllegalArgumentException("The input was invalid: You entered a ${guess.length} long digit instead of a ${goal.length} long digit!")
        }
        for (i in guess.indices) {
            if (goal.contains(guess[i]) && !unique.contains(guess[i])) {
                unique.add(guess[i])
                n++
            }
            if (guess[i] == goal[i]) {
                m++
            }
        }
        CompareResult(n, m)   // return value is a placeholder
    }
}

fun main() {
    App().playNumberGame(digitsToGuess = 5)
    App().playNumberGame()
}
